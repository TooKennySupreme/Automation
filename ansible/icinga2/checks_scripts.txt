##################################
# Templates (checks/scripts etc) #
##################################
Location: /etc/icinga2/zones.d/global-templates/
Updating scripts in here will automatically distribute the updated scripts to all clients (after /usr/lib/icinga2/safe-reload)

### chronyd
Fixed /etc/icinga2/zones.d/global-templates/checks/linux/chronyd.conf
Added && host.vars.ansible_os_family != "Debian"

### ping
Fixed /etc/icinga2/zones.d/global-templates/checks/all/ping.conf
Commented out "ignore where host.vars.is_satellite"

### mailq
Changed /etc/icinga2/zones.d/global-templates/checks/linux/mailq.conf
and added && host.vars.mailq == "true"
This has been added to host.conf.j2 to dynamically build from a icinga_hv in host_vars

### SELinux
Created new plugin script ansible1:/etc/ansible/icinga2/playbooks/roles/monitoring_plugins/files/custom_checks
Ansible copies selinux.conf from /etc/ansible/icinga2/playbooks/roles/icinga2_checks/templates/checks/linux 
to /etc/icinga2/zones.d/global-templates/checks/linux via /etc/ansible/icinga2/playbooks/roles/icinga2_checks/tasks/main.yml
CheckCommand object added to /etc/ansible/icinga2/playbooks/roles/icinga2_master/templates/global-templates/commands.conf

### firewall
Created new plugin script ansible1:/etc/ansible/icinga2/playbooks/roles/monitoring_plugins/files/custom_checks/check_firewall
Ansible copies firewall.conf from /etc/ansible/icinga2/playbooks/roles/icinga2_checks/templates/checks/linux 
to /etc/icinga2/zones.d/global-templates/checks/linux via /etc/ansible/icinga2/playbooks/roles/icinga2_checks/tasks/main.yml
CheckCommand object added to /etc/ansible/icinga2/playbooks/roles/icinga2_master/templates/global-templates/commands.conf
*** selinux issues on client2

### ido
This is using a built-in check and is configured in /etc/ansible/icinga2/playbooks/roles/icinga2_checks/templates/checks/all/ido.conf
Gets installed to /etc/icinga2/zones.d/global-templates/checks/all

### redis
https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-redis-on-ubuntu-20-04
installed and running on ubuntu20
apt-cache search 'perl$' | grep -i redis
apt install libredis-perl
cd /usr/lib/nagios/plugins
wget https://raw.githubusercontent.com/willixix/naglio-plugins/master/check_redis.pl
chmod 700
./check_redis.pl -H 127.0.0.1 -x password

https://icinga.com/docs/icinga2/latest/doc/10-icinga-template-library/#redis
CheckCommand definitions are in /usr/share/icinga2/include/plugins-contrib.d/databases.conf

To assign to a client add vars in host.conf file e.g.:
  /* variables used for redis monitoring */
  vars.redis = true
  vars.redis_password = "password"

### check_mysqldb
https://icinga.com/docs/icinga2/latest/doc/10-icinga-template-library/#mysql_health
https://labs.consol.de/nagios/check_mysql_health/index.html
#CheckCommand definitions are in /usr/share/icinga2/include/plugins-contrib.d/databases.conf
n.b. the installed check_mysql and the 'internal' one do not align!
I copied check_mysql to check_mysqldb (added to Ansible)

e.g. ./check_mysqldb -H localhost -d icingaweb -u icingaweb -p password

To assign to a client, add vars in host.conf file (set in host_vars for Ansible) e.g.:
  /* variables used for mysql monitoring */
  vars.mysqldb = true
  vars.mysqldb_health_hostname = "localhost"
  vars.mysqldb_health_username = "icingaweb"
  vars.mysqldb_health_password = "password"
  vars.mysqldb_health_database = "icingaweb"

Then create the mysqldb.conf file in /etc/icinga2/zones.d/global-templates/checks/services
And a CheckCommand object in commands.conf (this has been added to the ansible template)
object CheckCommand "mysqldb" {
  command = [ PluginDir + "/check_mysqldb" ]

  arguments = {
    "-H" = "$mysqldb_health_hostname$"
    "-u" = "$mysqldb_health_username$"
    "-p" = "$mysqldb_health_password$"
    "-d" = "$mysqldb_health_database$"
  }
}

### check_systemd
A generic script file for checking status of any systemd service
Created new plugin script icinga2/playbooks/roles/monitoring_plugins/files/custom_checks/check_systemd
Ansible copies systemd.conf from icinga2/playbooks/roles/icinga2_checks/templates/checks/linux 
to /etc/icinga2/zones.d/global-templates/checks/linux via icinga2/playbooks/roles/icinga2_checks/tasks/main.yml
CheckCommand object added to icinga2/playbooks/roles/icinga2_master/templates/global-templates/commands.conf

To assign to a client, add vars in host.conf file (this has been added to host.conf.j2 to dynamically build from a list in host_vars)
/* variables used for systemd monitoring */
vars.systemd["nginx"] = {
}
vars.systemd["joeblow"] = {
}

### check_service ???

### check_mongodb
https://icinga.com/docs/icinga2/latest/doc/10-icinga-template-library/#mongodb
cd /usr/lib/nagios/plugins && wget https://raw.githubusercontent.com/mzupan/nagios-plugin-mongodb/master/check_mongodb.py
chmod 755 check_mongodb.py
modify script to source python3: #!/usr/bin/env python3
in line 1389 change db.collection_names(): to db.list_collection_names():
apt install -y python3-pymongo

wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -
echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list
sudo apt-get update
systemctl start mongod
change bindIp in /etc/mongod.conf to 0.0.0.0
enable replication in /etc/mongod.conf
  replication:
    replSetName: myreplsetname
ufw allow 27017 && ufw reload
systemctl restart mongod
get shell: mongo
> rs.initiate( {
 _id: "myreplset",
 members : [
 { _id: 0, host: "galera1" },
 { _id: 1, host: "galera2" },
 { _id: 2, host: "galera3" }
 ]
 })
{

rs.conf() # shows configuration
rs.status() # shows who's primary/secondary

# e.g. To check primary status add the following to host.conf:
(see /usr/share/icinga2/include/plugins-contrib.d/databases.conf for other options)
vars.mongodb = "true"
vars.mongodb_replicaset = "myreplset"
vars.mongodb_replcheck = "true"
vars.mongodb_action = "replica_primary"

### check_haproxy_status
https://icinga.com/docs/icinga2/latest/doc/10-icinga-template-library/#haproxy_status
apt install -y haproxy # done on galera1, galera 2/3 backend nginx
allow icinga access to the stats socket in /etc/haproxy/haproxy.cfg (added below default stats line)
stats socket /run/haproxy/admin.sock user haproxy group nagios mode 660 level operator
frontend myfrontend
        bind 0.0.0.0:80
        default_backend webapps
        option forwardfor

backend webapps
       balance roundrobin
       server galera3 192.168.1.224:80 check
       server galera2 192.168.1.223:80 check

validate configuration: haproxy -f /etc/haproxy/haproxy.cfg -c -V

cd /usr/lib/nagios/plugins && wget https://raw.githubusercontent.com/jonathanio/monitoring-nagios-haproxy/master/check_haproxy
chmod 755 check_haproxy
line 138 change .sock file to /var/run/haproxy-master.sock
apt install -y libswitch-perl
./check_haproxy -S /run/haproxy/admin.sock

Set vars in host.conf:
vars.haproxy = "true"
vars.haproxy_status_socket = "/run/haproxy/admin.sock"
create haproxy_status.conf
May want to change the LIMIT_ values accordingly (or pass in an override in the host.conf file?)

### check_rabbitmq
https://github.com/CaptPhunkosis/check_rabbitmq/blob/master/check_rabbitmq

### check http/s / certificates
This can be achieved via vhosts.conf already in /etc/icinga2/zones.d/global-templates/checks/services
Add suitable variables in the host.conf file. e.g.:
vars.vhosts_http["192.168.1.234"] = {
  }
*** This is still WIP ***

### TO-DO
Proper check_time for (time.conf) chronyd and timesyncd
Need to fix /etc/icinga2/zones.d/global-templates/checks/linux/time.conf
Set 'assign where ! host.vars.client_endpoint' to switch it off
change vars.ntp_address = "2.centos.pool.ntp.org" to temporarily fix

#################
# Custom Checks #
#################
Template library reference is here: https://icinga.com/docs/icinga2/latest/doc/10-icinga-template-library/
https://exchange.icinga.com/
Custom checks can be added in master:/usr/lib[64]/nagios/plugins (shell/python/perl/C etc.)
Also add the script to the clients in /usr/lib[64]/nagios/plugins # Not 64 on Ubuntu
Then create a configuration file in /etc/icinga2/zones.d/global-templates/checks/linux e.g. service.conf
Now create a CheckCommand object in commands.conf (in global-templates (or conf.d?))
See example files: 
centos81|testmaster:/usr/lib64/nagios/plugins/check_[service|selinux]
centos81|testmaster:/etc/icinga2/zones.d/global-templates/commands.conf
centos81|testmaster:/etc/icinga2/zones.d/global-templates/checks/linux/[selinux|firewall].conf
Don't forget SELinux contexts, if appropriate.

# Ansible
Custom check files are located here: /etc/ansible/icinga2/playbooks/roles/monitoring_plugins/files/custom_checks/
These should be installed by the monitoring_plugins role via /etc/ansible/icinga2/playbooks/roles/monitoring_plugins/tasks/main.yml

To install/distribute the nagios plugins and custom checks:
ansible-playbook -i ../icinga2_hosts2 icinga2-plugins.yml -e "host=client2"

How do we manage the master (.conf and CheckCommand) config?

#################
# Health Checks #
#################
Ansible puts them here: /etc/icinga2/zones.d/global-templates/checks/all
# Ansible ones work fine but I also tested others:
# Created cluster.conf and health.conf in /etc/icinga2/zones.d/master
# Created health.conf in /etc/icinga2/zones.d/satellite
# New ones in centos1:/etc/ansible/icinga2/config_files