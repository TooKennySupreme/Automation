git clone https://github.com/adfinis-sygroup/ansible-role-graphite.git
mv ansible-role-graphite graphite

Modified: 
graphite_web_timezone 
graphite_web_db_password 
graphite_web_salt
in /etc/ansible/graphite/defaults/main.yml

Added more packages (httpd-devel|gcc etc) to graphite_requirements in /etc/ansible/graphite/playbooks/roles/graphite/vars/CentOS_7.yml

cd /etc/ansible/graphite
ansible-playbook playbooks/install_graphite.yml -i graphite_hosts -e "graphite_web_salt=password"

cd /opt/graphite/examples/init.d
bash carbon-cache start

Now listening on port 2003
firewall-cmd --zone=public --permanent --add-port=2003/tcp
firewall-cmd --reload
firewall-cmd --list-ports

firewall-cmd --zone=public --permanent --add-service=http
firewall-cmd --zone=public --permanent --add-service=https

Now refer to the icinga2 cheatsheet for integration

# Issues
1) empty file /etc/httpd/conf.modules.d/02-wsgi.conf - deleted and rerun

2) Aug 06 14:28:20 client3 httpd[55918]: (2)No such file or directory: 
AH02291: Cannot access directory '/opt/graphite/storage/log/webapp/' 
for error log of vhost defined at /etc/httpd/conf.d/graphite-web.conf:24

mkdir /opt/graphite/storage/log/webapp/

3) systemctl start httpd failing (AH01574: module wsgi_module is already loaded)

chmod 755 /usr/lib64/httpd/modules/mod_wsgi-py36.cpython-36m-x86_64-linux-gnu.so

vi /etc/httpd/conf.d/graphite-web.conf
LoadModule wsgi_module /usr/lib64/httpd/modules/mod_wsgi-py36.cpython-36m-x86_64-linux-gnu.so
#LoadModule wsgi_module /usr/lib64/python3.4/site-packages/mod_wsgi/server/mod_wsgi-py34.cpython-34m.so


SElinux! 
semanage fcontext -a -t httpd_log_t "/opt/graphite/storage/log/webapp(/.*)?"
restorecon -Rv /opt/graphite/storage/log/webapp
ls -lZ /opt/graphite/storage/log/
systemctl start httpd

Log files are in /opt/graphite/storage/log/webapp

Check systemd? 

Also: graphite.wsgi was not created in /opt/graphite/conf
import sys
sys.path.append('/opt/graphite/webapp')
from graphite.wsgi import application

###########################
# Manual Graphite install #
###########################
sed -i '/^\#PermitRootLogin.*/a PermitRootLogin yes' /etc/ssh/sshd_config
systemctl restart sshd
timedatectl set-timezone "Europe/London"
lvextend -L +5G /dev/mapper/ubuntu--vg-ubuntu--lv -r

Taken from: https://community.icinga.com/t/ubuntu-18-04-bionic-graphite-guide/1327

# install packages
apt-get install python-dev build-essential python-pip libapache2-mod-wsgi -y

apt install golang -y
apt install libapache2-mod-wsgi
apt install libcairo2-dev
apt install python-sqlite
apt install libffi-dev
apt install apache2
apt install python3-pip


wget https://github.com/lomik/go-carbon/releases/download/v0.15.0/go-carbon_0.15.0_amd64.deb
dpkg -i go-carbon_0.15.0_amd64.deb

# modify config
cd /etc/go-carbon/
tailor go-carbon.conf to your needs (max-cpu's etc.)
modify/tailor storage-schemas.conf for retention
[icinga_internals]
pattern = ^icinga\..*\.(max_check_attempts|reachable|current_attempt|execution_time|latency|state|state_type)
retentions = 5m:7d
[icinga_default]
pattern = ^icinga\.
retentions = 1m:2d,5m:10d,30m:90d,360m:4y

systemctl enable go-carbon --now
systemctl status go-carbon

# Whisper and Graphite-Web
export PYTHONPATH="/opt/graphite/lib/:/opt/graphite/webapp/"
pip3 install --no-binary=:all: https://github.com/graphite-project/whisper/archive/1.1.7.tar.gz
pip3 install --no-binary=:all: https://github.com/graphite-project/graphite-web/archive/1.1.7.tar.gz

cp /opt/graphite/webapp/graphite/local_settings.py.example /opt/graphite/webapp/graphite/local_settings.py
vi /opt/graphite/webapp/graphite/local_settings.py
Set:
SECRET_KEY = 'password'
ALLOWED_HOSTS = [ '*' ]
TIME_ZONE = 'Europe/London'
WHISPER_DIR = '/opt/graphite/storage/whisper'

# Create the Whisper Directory and adjust ownership
mkdir -pv /var/lib/graphite/whisper
chown -Rf carbon. /var/lib/graphite/whisper

# Graphite Web WSGI
cp /opt/graphite/conf/graphite.wsgi.example /opt/graphite/conf/graphite.wsgi

# Graphite Website
mkdir -pv /etc/pki/tls/private
cd /etc/pki/tls/private
openssl genrsa -out certificate.key 2048
openssl req -new -key certificate.key -out certificate.csr -subj "/C=UK/ST=Hampshire/L=Hedge End/O=NetPay Solutions Group Ltd/OU=IT/CN=graphite1/emailAddress=it.operations@technologi.co.uk"
openssl x509 -req -days 3650 -in certificate.csr -signkey certificate.key -out certificate.crt
cat certificate.key > certificate.pem
cat certificate.crt >> certificate.pem
cd /etc/apache2/sites-available/
vi graphite-web-ssl.conf

# Enable virtualhosts, perhaps by adding this to your server's config somewhere,
# probably the main httpd.conf
# NameVirtualHost *:443
 
# This line also needs to be in your server's config.
# LoadModule wsgi_module modules/mod_wsgi.so
 
# You need to manually edit this file to fit your needs.
# This configuration assumes the default installation prefix
# of /opt/graphite/, if you installed graphite somewhere else
# you will need to change all the occurrences of /opt/graphite/
# in this file to your chosen install location.
 
<IfModule !wsgi_module.c>
    LoadModule wsgi_module modules/mod_wsgi.so
</IfModule>
 
# XXX You need to set this up!
# Read http://code.google.com/p/modwsgi/wiki/ConfigurationDirectives#WSGISocketPrefix
# For example, create a directory /var/run/wsgi and use that.
WSGISocketPrefix /var/run/apache2/wsgi
 
<VirtualHost *:443>
    # Base Configuration
    ServerName localhost.local
    DocumentRoot "/opt/graphite/webapp"
     
    # Log Configuration
    ErrorLog /opt/graphite/storage/log/webapp/error.log
    CustomLog /opt/graphite/storage/log/webapp/access.log common
 
    # SSL Configuration
    SSLEngine On
    SSLCertificateFile /etc/pki/tls/private/certificate.crt
    SSLCertificateKeyFile /etc/pki/tls/private/certificate.key
    SSLCertificateChainFile /etc/pki/tls/private/certificate.pem
 
    # Graphite Related Configuration
    # I've found that an equal number of processes & threads tends
    # to show the best performance for Graphite (ymmv).
    WSGIDaemonProcess graphite processes=5 threads=5 display-name='%{GROUP}' inactivity-timeout=120
    WSGIProcessGroup graphite
    WSGIApplicationGroup %{GLOBAL}
    WSGIImportScript /opt/graphite/conf/graphite.wsgi process-group=graphite application-group=%{GLOBAL}
 
    # XXX You will need to create this file! There is a graphite.wsgi.example
    # file in this directory that you can safely use, just copy it to graphite.wgsi
    WSGIScriptAlias / /opt/graphite/conf/graphite.wsgi
 
    # XXX To serve static files, either:
    # * Install the whitenoise Python package (pip install whitenoise)
    # * Collect static files in a directory by running:
    #     django-admin.py collectstatic --noinput --settings=graphite.settings
    #   And set an alias to serve static files with Apache:
    Alias /static/ /opt/graphite/static/
 
    ########################
    # URL-prefixed install #
    ########################
    # If using URL_PREFIX in local_settings for URL-prefixed install (that is not located at "/"))
    # your WSGIScriptAlias line should look like the following (e.g. URL_PREFX="/graphite"
 
    # WSGIScriptAlias /graphite /srv/graphite-web/conf/graphite.wsgi/graphite
    # Alias /graphite/static /opt/graphite/webapp/content
    #  <Location "/graphite/static/">
    #        SetHandler None
    # </Location>
 
    # XXX In order for the django admin site media to work you
    # must change @DJANGO_ROOT@ to be the path to your django
    # installation, which is probably something like:
    # /usr/lib/python2.6/site-packages/django
    Alias /media/ "@DJANGO_ROOT@/contrib/admin/media/"
 
    # The graphite.wsgi file has to be accessible by apache. It won't
    # be visible to clients because of the DocumentRoot though.
    <Directory /opt/graphite/conf/>
        <IfVersion < 2.4>
            Order deny,allow
            Allow from all
        </IfVersion>
        <IfVersion >= 2.4>
            Require all granted
        </IfVersion>
    </Directory>
    <Directory /opt/graphite/static/>
        <IfVersion < 2.4>
            Order deny,allow
            Allow from all
        </IfVersion>
        <IfVersion >= 2.4>
            Require all granted
        </IfVersion>
    </Directory>
</VirtualHost>

apachectl -t
PYTHONPATH=/opt/graphite/webapp django-admin.py migrate --settings=graphite.settings --run-syncdb
PYTHONPATH=/opt/graphite/webapp django-admin.py createsuperuser --settings=graphite.settings
user: root password: password
PYTHONPATH=/opt/graphite/webapp django-admin.py collectstatic --noinput --settings=graphite.settings  
chown -R www-data. /opt/graphite
a2enmod ssl
a2enmod wsgi
a2ensite graphite-web-ssl.conf
systemctl enable apache2 --now
systemctl enable go-carbon --now

icinga2 feature disable graphite
edit hostname in /etc/icinga2/features-enabled/graphite.conf
icinga2 feature enable graphite
/usr/lib/icinga2/safe-reload

ll /var/lib/graphite/whisper/icinga2

####################
# Graphite install #
# https://computingforgeeks.com/how-to-install-and-configure-graphite-on-ubuntu-18-04/
####################

apt-get install graphite-web graphite-carbon
apt policy graphite-web graphite-carbon

# mariadb
apt-get install software-properties-common
apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8
add-apt-repository "deb [arch=amd64,arm64,ppc64el] http://mariadb.mirror.liquidtelecom.com/repo/10.4/ubuntu $(lsb_release -cs) main"
apt update
apt -y install mariadb-server mariadb-client
mysql_secure_installation
mysql -u root -p
CREATE DATABASE graphite;
GRANT ALL PRIVILEGES ON graphite.* TO graphite IDENTIFIED BY "password";
FLUSH PRIVILEGES;
QUIT;

# configure graphite and carbon
vim /etc/graphite/local_settings.py
change TIME_ZONE, SECRET_KEY and change DATABASES section:
DATABASES = {
    'default': {
        'NAME': 'graphite',
        'ENGINE': 'django.db.backends.mysql',
        'USER': 'graphite',
        'PASSWORD': 'password',
        'HOST': '127.0.0.1',
        'PORT': ''
    }
}

apt -y install python3-pymysql python-pymysql # python-pymysql not available on Ubuntu 20.04

#
# Add bionic repo. for Ubuntu 20.04
echo "deb http://gb.archive.ubuntu.com/ubuntu bionic main" >> /etc/apt/sources.list
apt-get update
apt install python-pymysql
apt-get install libmysqlclient-dev
apt-get install python-mysqldb
apt install python3-pip
pip3 install mysqlclient
apt install python2
curl https://bootstrap.pypa.io/get-pip.py --output get-pip.py
python2 get-pip.py
pip install mysql-python
DOES NOT WORK :(
#

graphite-manage migrate auth # fails on Ubuntu 20.04
vim /etc/default/graphite-carbon # set CARBON_CACHE_ENABLED=true
vim /etc/carbon/carbon.conf # set ENABLE_LOGROTATION = True
systemctl start carbon-cache
systemctl enable carbon-cache

# Configure the Web app
apt -y install nginx gunicorn
touch /var/log/nginx/{graphite.access.log,graphite.error.log}
chmod 640 /var/log/nginx/graphite.*
chown www-data:www-data /var/log/nginx/graphite.*
vi /etc/nginx/sites-available/graphite
upstream graphite {
    server 127.0.0.1:8080 fail_timeout=0;
}

server {
    listen 80 default_server;

    server_name ubuntu1804;

    root /opt/graphite/webapp;

    access_log /var/log/nginx/graphite.access.log;
    error_log  /var/log/nginx/graphite.error.log;

    location = /favicon.ico {
        return 204;
    }

    # serve static content from the "content" directory
    location /static {
        alias /opt/graphite/webapp/content;
        expires max;
    }

    location / {
        try_files $uri @graphite;
    }

    location @graphite {
        proxy_pass_header Server;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Scheme $scheme;
        proxy_connect_timeout 10;
        proxy_read_timeout 10;
        proxy_pass http://graphite;
    }
}

# Change server_name above as appropriate

ln -s /etc/nginx/sites-available/graphite /etc/nginx/sites-enabled
rm -f /etc/nginx/sites-enabled/default
nginx -t






##############################################
# Graphite (Carbon/Graphite-api) and Grafana #
##############################################
https://grafana.com/docs/grafana/latest/tutorials/stack_guide_graphite/

# For ubuntu20 see list at bottom
apt-get install \
    git \
    build-essential \
    libffi-dev libcairo2-dev \
    python-django \
    python-django-tagging \
    python-simplejson \
    python-memcache \
    python-ldap \
    python-cairo \
    python-twisted \
    python-pysqlite2 \
    dh-python \
    python-dev \
    python-pip
    # python-support \ was removed from the above list and replaced with dh-python
    
cd /usr/local/src
git clone https://github.com/graphite-project/carbon.git
git clone https://github.com/graphite-project/whisper.git
#cd whisper && python setup.py install && cd ..
cd whisper && python3 setup.py install && cd ..
#cd carbon && python setup.py install && cd ..
cd carbon && python3 setup.py install && cd ..

cp /opt/graphite/conf/carbon.conf.example /opt/graphite/conf/carbon.conf
change ENABLE_UDP_LISTENER = True
cp /opt/graphite/conf/storage-schemas.conf.example /opt/graphite/conf/storage-schemas.conf
add the icinga2 schemas to /opt/graphite/conf/storage-schemas.conf

[icinga_internals]
pattern = ^icinga\..*\.(max_check_attempts|reachable|current_attempt|execution_time|latency|state|state_type)
retentions = 5m:7d

[icinga_default]
pattern = ^icinga\.
retentions = 1m:2d,5m:10d,30m:90d,360m:4y

Modify storage-aggregation.conf as per requirements: https://grafana.com/docs/grafana/latest/tutorials/stack_guide_graphite/#configure-storage-aggregationconf
(left unchanged)

apt install supervisor
vi /etc/supervisor/conf.d/carbon.conf

[program:carbon-cache]
command = /opt/graphite/bin/carbon-cache.py --debug start
stdout_logfile = /var/log/supervisor/%(program_name)s.log
stderr_logfile = /var/log/supervisor/%(program_name)s.log
autorestart = true
stopsignal = QUIT

supervisorctl reload
supervisorctl

### graphite-api ###
#pip install gunicorn graphite-api
pip3 install gunicorn graphite-api

vi /etc/graphite-api.yaml

search_index: /opt/graphite/storage/index
finders:
  - graphite_api.finders.whisper.WhisperFinder
functions:
  - graphite_api.functions.SeriesFunctions
  - graphite_api.functions.PieFunctions
whisper:
  directories:
    - /opt/graphite/storage/whisper
time_zone: UTC

vi /etc/supervisor/conf.d/graphite-api.conf
[program:graphite-api]
command = gunicorn -b 0.0.0.0:8888 -w 2 --log-level info graphite_api.app:app
stdout_logfile = /var/log/supervisor/%(program_name)s.log
stderr_logfile = /var/log/supervisor/%(program_name)s.log
autorestart = true
stopsignal = QUIT

supervisorctl reload

### Send data from Icinga2 to graphite ###
vi /etc/icinga2/features-available/graphite.conf
set correct host value
enable_send_thresholds = true
enable_send_metadata = true
icinga2 feature enable graphite
systemctl restart icinga2

check /opt/graphite/storage/whisper/icinga2 for the wsp (whisper) files

### Grafana ###
echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list
wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
apt-get update
apt-get install grafana
systemctl daemon-reload
systemctl enable grafana-server
systemctl start grafana-server

http://192.168.1.214:3000/login
admin / admin (changed to password)

Add data source -> Graphite
http://localhost:8888
Save & Test

Import dashboard nos. 56 and 5009 
grafana-cli plugins install grafana-clock-panel

### End


### Ubuntu 20.04
apt-get install \
    git \
    build-essential \
    libffi-dev libcairo2-dev \
    python3-django \
    python3-django-tagging \
    python3-simplejson \
    python3-memcache \
    python3-ldap \
    python3-cairo \
    python3-twisted \
    python-pysqlite2 \
    dh-python \
    python-dev-is-python2 \
    python3-pip
    # python-support \ was removed from the above list and replaced with dh-python




